/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  TestContract,
  TestContractInterface,
} from "../../../contracts/TestContract.sol/TestContract";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_tokenA",
        type: "address",
      },
      {
        internalType: "address",
        name: "_tokenB",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amountA",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_amountB",
        type: "uint256",
      },
    ],
    name: "addLiquidity",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_tokenA",
        type: "address",
      },
      {
        internalType: "address",
        name: "_tokenB",
        type: "address",
      },
    ],
    name: "removeLiquidity",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610a84806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80639cf38f7c1461003b578063cf6c62ea14610057575b600080fd5b61005560048036038101906100509190610601565b610073565b005b610071600480360381019061006c9190610677565b6102c3565b005b6000735c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f73ffffffffffffffffffffffffffffffffffffffff1663e6a4390584846040518363ffffffff1660e01b81526004016100c49291906106ed565b602060405180830381865afa1580156100e1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610105919061072b565b905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016101429190610758565b602060405180830381865afa15801561015f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101839190610788565b90508173ffffffffffffffffffffffffffffffffffffffff1663095ea7b3737a250d5630b4cf539739df2c5dacb4c659f2488d836040518363ffffffff1660e01b81526004016101d49291906107c4565b6020604051808303816000875af11580156101f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102179190610825565b50600080737a250d5630b4cf539739df2c5dacb4c659f2488d73ffffffffffffffffffffffffffffffffffffffff1663baa2abde87878660018030426040518863ffffffff1660e01b81526004016102759796959493929190610897565b60408051808303816000875af1158015610293573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102b79190610906565b91509150505050505050565b8373ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b815260040161030093929190610946565b6020604051808303816000875af115801561031f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103439190610825565b508273ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b815260040161038193929190610946565b6020604051808303816000875af11580156103a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c49190610825565b508373ffffffffffffffffffffffffffffffffffffffff1663095ea7b3737a250d5630b4cf539739df2c5dacb4c659f2488d846040518363ffffffff1660e01b81526004016104149291906107c4565b6020604051808303816000875af1158015610433573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104579190610825565b508273ffffffffffffffffffffffffffffffffffffffff1663095ea7b3737a250d5630b4cf539739df2c5dacb4c659f2488d836040518363ffffffff1660e01b81526004016104a79291906107c4565b6020604051808303816000875af11580156104c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ea9190610825565b506000806000737a250d5630b4cf539739df2c5dacb4c659f2488d73ffffffffffffffffffffffffffffffffffffffff1663e8e337008888888860018030426040518963ffffffff1660e01b815260040161054c98979695949392919061097d565b6060604051808303816000875af115801561056b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058f91906109fb565b92509250925050505050505050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006105ce826105a3565b9050919050565b6105de816105c3565b81146105e957600080fd5b50565b6000813590506105fb816105d5565b92915050565b600080604083850312156106185761061761059e565b5b6000610626858286016105ec565b9250506020610637858286016105ec565b9150509250929050565b6000819050919050565b61065481610641565b811461065f57600080fd5b50565b6000813590506106718161064b565b92915050565b600080600080608085870312156106915761069061059e565b5b600061069f878288016105ec565b94505060206106b0878288016105ec565b93505060406106c187828801610662565b92505060606106d287828801610662565b91505092959194509250565b6106e7816105c3565b82525050565b600060408201905061070260008301856106de565b61070f60208301846106de565b9392505050565b600081519050610725816105d5565b92915050565b6000602082840312156107415761074061059e565b5b600061074f84828501610716565b91505092915050565b600060208201905061076d60008301846106de565b92915050565b6000815190506107828161064b565b92915050565b60006020828403121561079e5761079d61059e565b5b60006107ac84828501610773565b91505092915050565b6107be81610641565b82525050565b60006040820190506107d960008301856106de565b6107e660208301846107b5565b9392505050565b60008115159050919050565b610802816107ed565b811461080d57600080fd5b50565b60008151905061081f816107f9565b92915050565b60006020828403121561083b5761083a61059e565b5b600061084984828501610810565b91505092915050565b6000819050919050565b6000819050919050565b600061088161087c61087784610852565b61085c565b610641565b9050919050565b61089181610866565b82525050565b600060e0820190506108ac600083018a6106de565b6108b960208301896106de565b6108c660408301886107b5565b6108d36060830187610888565b6108e06080830186610888565b6108ed60a08301856106de565b6108fa60c08301846107b5565b98975050505050505050565b6000806040838503121561091d5761091c61059e565b5b600061092b85828601610773565b925050602061093c85828601610773565b9150509250929050565b600060608201905061095b60008301866106de565b61096860208301856106de565b61097560408301846107b5565b949350505050565b600061010082019050610993600083018b6106de565b6109a0602083018a6106de565b6109ad60408301896107b5565b6109ba60608301886107b5565b6109c76080830187610888565b6109d460a0830186610888565b6109e160c08301856106de565b6109ee60e08301846107b5565b9998505050505050505050565b600080600060608486031215610a1457610a1361059e565b5b6000610a2286828701610773565b9350506020610a3386828701610773565b9250506040610a4486828701610773565b915050925092509256fea26469706673582212201b2ca298d1a4663481d0f83069ef731762ac14e53318af732e55dfe07573be2764736f6c63430008110033";

type TestContractConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestContractConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestContract__factory extends ContractFactory {
  constructor(...args: TestContractConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TestContract> {
    return super.deploy(overrides || {}) as Promise<TestContract>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestContract {
    return super.attach(address) as TestContract;
  }
  override connect(signer: Signer): TestContract__factory {
    return super.connect(signer) as TestContract__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestContractInterface {
    return new utils.Interface(_abi) as TestContractInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestContract {
    return new Contract(address, _abi, signerOrProvider) as TestContract;
  }
}
